//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50401.0
// 
namespace SilverlightApplication.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="ServiceReference1.TestService")]
    public interface TestService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:TestService/GetServerTime", ReplyAction="urn:TestService/GetServerTimeResponse")]
        System.IAsyncResult BeginGetServerTime(System.AsyncCallback callback, object asyncState);
        
        System.DateTime EndGetServerTime(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:TestService/GetCachedServerTime", ReplyAction="urn:TestService/GetCachedServerTimeResponse")]
        System.IAsyncResult BeginGetCachedServerTime(System.AsyncCallback callback, object asyncState);
        
        System.DateTime EndGetCachedServerTime(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:TestService/GetServerTimeSlow", ReplyAction="urn:TestService/GetServerTimeSlowResponse")]
        System.IAsyncResult BeginGetServerTimeSlow(System.AsyncCallback callback, object asyncState);
        
        System.DateTime EndGetServerTimeSlow(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface TestServiceChannel : SilverlightApplication.ServiceReference1.TestService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetServerTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetServerTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.DateTime Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCachedServerTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCachedServerTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.DateTime Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetServerTimeSlowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetServerTimeSlowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.DateTime Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestServiceClient : System.ServiceModel.ClientBase<SilverlightApplication.ServiceReference1.TestService>, SilverlightApplication.ServiceReference1.TestService {
        
        private BeginOperationDelegate onBeginGetServerTimeDelegate;
        
        private EndOperationDelegate onEndGetServerTimeDelegate;
        
        private System.Threading.SendOrPostCallback onGetServerTimeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCachedServerTimeDelegate;
        
        private EndOperationDelegate onEndGetCachedServerTimeDelegate;
        
        private System.Threading.SendOrPostCallback onGetCachedServerTimeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetServerTimeSlowDelegate;
        
        private EndOperationDelegate onEndGetServerTimeSlowDelegate;
        
        private System.Threading.SendOrPostCallback onGetServerTimeSlowCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public TestServiceClient() {
        }
        
        public TestServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TestServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TestServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TestServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetServerTimeCompletedEventArgs> GetServerTimeCompleted;
        
        public event System.EventHandler<GetCachedServerTimeCompletedEventArgs> GetCachedServerTimeCompleted;
        
        public event System.EventHandler<GetServerTimeSlowCompletedEventArgs> GetServerTimeSlowCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightApplication.ServiceReference1.TestService.BeginGetServerTime(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetServerTime(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.DateTime SilverlightApplication.ServiceReference1.TestService.EndGetServerTime(System.IAsyncResult result) {
            return base.Channel.EndGetServerTime(result);
        }
        
        private System.IAsyncResult OnBeginGetServerTime(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SilverlightApplication.ServiceReference1.TestService)(this)).BeginGetServerTime(callback, asyncState);
        }
        
        private object[] OnEndGetServerTime(System.IAsyncResult result) {
            System.DateTime retVal = ((SilverlightApplication.ServiceReference1.TestService)(this)).EndGetServerTime(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetServerTimeCompleted(object state) {
            if ((this.GetServerTimeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetServerTimeCompleted(this, new GetServerTimeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetServerTimeAsync() {
            this.GetServerTimeAsync(null);
        }
        
        public void GetServerTimeAsync(object userState) {
            if ((this.onBeginGetServerTimeDelegate == null)) {
                this.onBeginGetServerTimeDelegate = new BeginOperationDelegate(this.OnBeginGetServerTime);
            }
            if ((this.onEndGetServerTimeDelegate == null)) {
                this.onEndGetServerTimeDelegate = new EndOperationDelegate(this.OnEndGetServerTime);
            }
            if ((this.onGetServerTimeCompletedDelegate == null)) {
                this.onGetServerTimeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetServerTimeCompleted);
            }
            base.InvokeAsync(this.onBeginGetServerTimeDelegate, null, this.onEndGetServerTimeDelegate, this.onGetServerTimeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightApplication.ServiceReference1.TestService.BeginGetCachedServerTime(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCachedServerTime(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.DateTime SilverlightApplication.ServiceReference1.TestService.EndGetCachedServerTime(System.IAsyncResult result) {
            return base.Channel.EndGetCachedServerTime(result);
        }
        
        private System.IAsyncResult OnBeginGetCachedServerTime(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SilverlightApplication.ServiceReference1.TestService)(this)).BeginGetCachedServerTime(callback, asyncState);
        }
        
        private object[] OnEndGetCachedServerTime(System.IAsyncResult result) {
            System.DateTime retVal = ((SilverlightApplication.ServiceReference1.TestService)(this)).EndGetCachedServerTime(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCachedServerTimeCompleted(object state) {
            if ((this.GetCachedServerTimeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCachedServerTimeCompleted(this, new GetCachedServerTimeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCachedServerTimeAsync() {
            this.GetCachedServerTimeAsync(null);
        }
        
        public void GetCachedServerTimeAsync(object userState) {
            if ((this.onBeginGetCachedServerTimeDelegate == null)) {
                this.onBeginGetCachedServerTimeDelegate = new BeginOperationDelegate(this.OnBeginGetCachedServerTime);
            }
            if ((this.onEndGetCachedServerTimeDelegate == null)) {
                this.onEndGetCachedServerTimeDelegate = new EndOperationDelegate(this.OnEndGetCachedServerTime);
            }
            if ((this.onGetCachedServerTimeCompletedDelegate == null)) {
                this.onGetCachedServerTimeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCachedServerTimeCompleted);
            }
            base.InvokeAsync(this.onBeginGetCachedServerTimeDelegate, null, this.onEndGetCachedServerTimeDelegate, this.onGetCachedServerTimeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightApplication.ServiceReference1.TestService.BeginGetServerTimeSlow(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetServerTimeSlow(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.DateTime SilverlightApplication.ServiceReference1.TestService.EndGetServerTimeSlow(System.IAsyncResult result) {
            return base.Channel.EndGetServerTimeSlow(result);
        }
        
        private System.IAsyncResult OnBeginGetServerTimeSlow(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SilverlightApplication.ServiceReference1.TestService)(this)).BeginGetServerTimeSlow(callback, asyncState);
        }
        
        private object[] OnEndGetServerTimeSlow(System.IAsyncResult result) {
            System.DateTime retVal = ((SilverlightApplication.ServiceReference1.TestService)(this)).EndGetServerTimeSlow(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetServerTimeSlowCompleted(object state) {
            if ((this.GetServerTimeSlowCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetServerTimeSlowCompleted(this, new GetServerTimeSlowCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetServerTimeSlowAsync() {
            this.GetServerTimeSlowAsync(null);
        }
        
        public void GetServerTimeSlowAsync(object userState) {
            if ((this.onBeginGetServerTimeSlowDelegate == null)) {
                this.onBeginGetServerTimeSlowDelegate = new BeginOperationDelegate(this.OnBeginGetServerTimeSlow);
            }
            if ((this.onEndGetServerTimeSlowDelegate == null)) {
                this.onEndGetServerTimeSlowDelegate = new EndOperationDelegate(this.OnEndGetServerTimeSlow);
            }
            if ((this.onGetServerTimeSlowCompletedDelegate == null)) {
                this.onGetServerTimeSlowCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetServerTimeSlowCompleted);
            }
            base.InvokeAsync(this.onBeginGetServerTimeSlowDelegate, null, this.onEndGetServerTimeSlowDelegate, this.onGetServerTimeSlowCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SilverlightApplication.ServiceReference1.TestService CreateChannel() {
            return new TestServiceClientChannel(this);
        }
        
        private class TestServiceClientChannel : ChannelBase<SilverlightApplication.ServiceReference1.TestService>, SilverlightApplication.ServiceReference1.TestService {
            
            public TestServiceClientChannel(System.ServiceModel.ClientBase<SilverlightApplication.ServiceReference1.TestService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetServerTime(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetServerTime", _args, callback, asyncState);
                return _result;
            }
            
            public System.DateTime EndGetServerTime(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.DateTime _result = ((System.DateTime)(base.EndInvoke("GetServerTime", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCachedServerTime(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetCachedServerTime", _args, callback, asyncState);
                return _result;
            }
            
            public System.DateTime EndGetCachedServerTime(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.DateTime _result = ((System.DateTime)(base.EndInvoke("GetCachedServerTime", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetServerTimeSlow(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetServerTimeSlow", _args, callback, asyncState);
                return _result;
            }
            
            public System.DateTime EndGetServerTimeSlow(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.DateTime _result = ((System.DateTime)(base.EndInvoke("GetServerTimeSlow", _args, result)));
                return _result;
            }
        }
    }
}
