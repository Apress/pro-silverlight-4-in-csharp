//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50401.0
// 
namespace DuplexService.Service {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskDescription", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class TaskDescription : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DataToProcessField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DataToProcess {
            get {
                return this.DataToProcessField;
            }
            set {
                if ((object.ReferenceEquals(this.DataToProcessField, value) != true)) {
                    this.DataToProcessField = value;
                    this.RaisePropertyChanged("DataToProcess");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskResult", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class TaskResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ProcessedDataField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProcessedData {
            get {
                return this.ProcessedDataField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessedDataField, value) != true)) {
                    this.ProcessedDataField = value;
                    this.RaisePropertyChanged("ProcessedData");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service.IAsyncTaskService", CallbackContract=typeof(DuplexService.Service.IAsyncTaskServiceCallback))]
    public interface IAsyncTaskService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IAsyncTaskService/SubmitTask")]
        System.IAsyncResult BeginSubmitTask(DuplexService.Service.TaskDescription task, System.AsyncCallback callback, object asyncState);
        
        void EndSubmitTask(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAsyncTaskServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAsyncTaskService/ReturnResult")]
        void ReturnResult(DuplexService.Service.TaskResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAsyncTaskServiceChannel : DuplexService.Service.IAsyncTaskService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AsyncTaskServiceClient : System.ServiceModel.DuplexClientBase<DuplexService.Service.IAsyncTaskService>, DuplexService.Service.IAsyncTaskService {
        
        private BeginOperationDelegate onBeginSubmitTaskDelegate;
        
        private EndOperationDelegate onEndSubmitTaskDelegate;
        
        private System.Threading.SendOrPostCallback onSubmitTaskCompletedDelegate;
        
        private bool useGeneratedCallback;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public AsyncTaskServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public AsyncTaskServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public AsyncTaskServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AsyncTaskServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AsyncTaskServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public AsyncTaskServiceClient(string endpointConfigurationName) : 
                this(new AsyncTaskServiceClientCallback(), endpointConfigurationName) {
        }
        
        private AsyncTaskServiceClient(AsyncTaskServiceClientCallback callbackImpl, string endpointConfigurationName) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl), endpointConfigurationName) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public AsyncTaskServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new AsyncTaskServiceClientCallback(), binding, remoteAddress) {
        }
        
        private AsyncTaskServiceClient(AsyncTaskServiceClientCallback callbackImpl, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl), binding, remoteAddress) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public AsyncTaskServiceClient() : 
                this(new AsyncTaskServiceClientCallback()) {
        }
        
        private AsyncTaskServiceClient(AsyncTaskServiceClientCallback callbackImpl) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl)) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SubmitTaskCompleted;
        
        public event System.EventHandler<ReturnResultReceivedEventArgs> ReturnResultReceived;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DuplexService.Service.IAsyncTaskService.BeginSubmitTask(DuplexService.Service.TaskDescription task, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSubmitTask(task, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void DuplexService.Service.IAsyncTaskService.EndSubmitTask(System.IAsyncResult result) {
            base.Channel.EndSubmitTask(result);
        }
        
        private System.IAsyncResult OnBeginSubmitTask(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            DuplexService.Service.TaskDescription task = ((DuplexService.Service.TaskDescription)(inValues[0]));
            return ((DuplexService.Service.IAsyncTaskService)(this)).BeginSubmitTask(task, callback, asyncState);
        }
        
        private object[] OnEndSubmitTask(System.IAsyncResult result) {
            ((DuplexService.Service.IAsyncTaskService)(this)).EndSubmitTask(result);
            return null;
        }
        
        private void OnSubmitTaskCompleted(object state) {
            if ((this.SubmitTaskCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SubmitTaskCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SubmitTaskAsync(DuplexService.Service.TaskDescription task) {
            this.SubmitTaskAsync(task, null);
        }
        
        public void SubmitTaskAsync(DuplexService.Service.TaskDescription task, object userState) {
            if ((this.onBeginSubmitTaskDelegate == null)) {
                this.onBeginSubmitTaskDelegate = new BeginOperationDelegate(this.OnBeginSubmitTask);
            }
            if ((this.onEndSubmitTaskDelegate == null)) {
                this.onEndSubmitTaskDelegate = new EndOperationDelegate(this.OnEndSubmitTask);
            }
            if ((this.onSubmitTaskCompletedDelegate == null)) {
                this.onSubmitTaskCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSubmitTaskCompleted);
            }
            base.InvokeAsync(this.onBeginSubmitTaskDelegate, new object[] {
                        task}, this.onEndSubmitTaskDelegate, this.onSubmitTaskCompletedDelegate, userState);
        }
        
        private void OnReturnResultReceived(object state) {
            if ((this.ReturnResultReceived != null)) {
                object[] results = ((object[])(state));
                this.ReturnResultReceived(this, new ReturnResultReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void VerifyCallbackEvents() {
            if (((this.useGeneratedCallback != true) 
                        && (this.ReturnResultReceived != null))) {
                throw new System.InvalidOperationException("Callback events cannot be used when the callback InstanceContext is specified. Pl" +
                        "ease choose between specifying the callback InstanceContext or subscribing to th" +
                        "e callback events.");
            }
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override DuplexService.Service.IAsyncTaskService CreateChannel() {
            return new AsyncTaskServiceClientChannel(this);
        }
        
        private class AsyncTaskServiceClientCallback : object, IAsyncTaskServiceCallback {
            
            private AsyncTaskServiceClient proxy;
            
            public void Initialize(AsyncTaskServiceClient proxy) {
                this.proxy = proxy;
            }
            
            public void ReturnResult(DuplexService.Service.TaskResult result) {
                this.proxy.OnReturnResultReceived(new object[] {
                            result});
            }
        }
        
        private class AsyncTaskServiceClientChannel : ChannelBase<DuplexService.Service.IAsyncTaskService>, DuplexService.Service.IAsyncTaskService {
            
            public AsyncTaskServiceClientChannel(System.ServiceModel.DuplexClientBase<DuplexService.Service.IAsyncTaskService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginSubmitTask(DuplexService.Service.TaskDescription task, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = task;
                System.IAsyncResult _result = base.BeginInvoke("SubmitTask", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSubmitTask(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SubmitTask", _args, result);
            }
        }
    }
    
    public class ReturnResultReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReturnResultReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuplexService.Service.TaskResult result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuplexService.Service.TaskResult)(this.results[0]));
            }
        }
    }
}
